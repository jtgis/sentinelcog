name: Weekly Sentinel-2 Change Detection (New Brunswick)

on:
  schedule:
    - cron: "0 15 * * 1"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  s2_change_detection:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            numpy \
            rasterio \
            rioxarray \
            xarray \
            dask[complete] \
            pystac-client \
            stackstac \
            shapely \
            pillow

      - name: Prepare output folders
        run: mkdir -p outputs tmp

      - name: Run Sentinel-2 change detection
        shell: bash
        run: |
          python <<'PY'
          import os, glob, datetime, warnings
          import numpy as np
          import xarray as xr
          import rasterio as rio
          from rasterio.enums import Resampling
          from shapely.geometry import box, mapping
          from pystac_client import Client
          import stackstac
          from PIL import Image

          warnings.filterwarnings("ignore")

          BBOX = (-69.2, 44.5, -63.6, 48.2)
          CLOUD_PCT = 30
          RES_M = 60
          LOOKBACK_DAYS = 14
          OUTDIR = "outputs"

          today = datetime.date.today()
          start = (today - datetime.timedelta(days=LOOKBACK_DAYS)).isoformat()
          end = today.isoformat()

          stac = Client.open("https://earth-search.aws.element84.com/v1")
          geom = mapping(box(*BBOX))

          search = stac.search(
              collections=["sentinel-s2-l2a-cogs"],
              intersects=geom,
              datetime=f"{start}/{end}",
              query={"eo:cloud_cover": {"lt": CLOUD_PCT}}
          )
          items = list(search.get_items())
          if not items:
              raise RuntimeError("No Sentinel-2 L2A items found.")

          # Group by date
          from collections import defaultdict
          by_date = defaultdict(list)
          for it in items:
              d = it.properties["datetime"][:10]
              by_date[d].append(it)

          dates = sorted(by_date.keys())
          picked_date = dates[-1]
          picked_items = by_date[picked_date]

          assets = ["B04", "B08"]
          da = stackstac.stack(
              picked_items,
              assets=assets,
              resolution=RES_M,
              bounds=BBOX,
              chunks={"time": 1, "x": 1024, "y": 1024},
              dtype="uint16"
          )

          arr = da.astype("float32") / 10000.0
          mosaic = arr.median(dim="time", skipna=True)

          red = mosaic.sel(band="B04")
          nir = mosaic.sel(band="B08")

          ndvi = (nir - red) / (nir + red + 1e-6)
          ndvi = ndvi.clip(-1, 1)
          ndvi = ndvi.rio.write_crs(da.rio.crs)
          ndvi = ndvi.rio.write_transform(da.rio.transform())

          ndvi_cog = os.path.join(OUTDIR, f"nb_ndvi_{picked_date}.tif")

          # Save as Cloud Optimized GeoTIFF
          ndvi.rio.to_raster(
              ndvi_cog,
              driver="COG",
              compress="LZW",
              dtype="float32",
              BLOCKSIZE=512,
              OVERVIEWS="AUTO"
          )

          # Quicklook PNG
          def save_png(data_xr, path):
              arr = data_xr.compute().values
              scaled = ((arr + 1) / 2 * 255).astype(np.uint8)
              Image.fromarray(scaled).save(path)

          ndvi_png = os.path.join(OUTDIR, f"nb_ndvi_{picked_date}.png")
          save_png(ndvi, ndvi_png)

          # Change detection if previous NDVI exists
          prev_files = sorted(glob.glob(os.path.join(OUTDIR, "nb_ndvi_*.tif")))
          prev_files = [f for f in prev_files if picked_date not in f]

          if prev_files:
              prev_path = prev_files[-1]
              with rio.open(prev_path) as src_prev, rio.open(ndvi_cog) as src_cur:
                  prev = src_prev.read(1, out_shape=(1, src_cur.height, src_cur.width), resampling=Resampling.bilinear)
                  cur = src_cur.read(1)
                  d = np.clip(cur - prev, -2.0, 2.0)

                  change_cog = os.path.join(OUTDIR, f"nb_ndvi_change_{picked_date}.tif")
                  profile = src_cur.profile.copy()
                  profile.update(driver="COG", compress="LZW", dtype="float32", BLOCKSIZE=512, OVERVIEWS="AUTO")

                  with rio.open(change_cog, "w", **profile) as dst:
                      dst.write(d.astype(np.float32), 1)

                  change_png = os.path.join(OUTDIR, f"nb_ndvi_change_{picked_date}.png")
                  lo, hi = -0.5, 0.5
                  scaled = np.clip((d - lo) / (hi - lo), 0, 1) * 255
                  Image.fromarray(scaled.astype(np.uint8)).save(change_png)
          PY

      - name: Commit COGs and PNGs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add outputs/*
          if git diff --cached --quiet; then
            echo "No new results to commit."
          else
            git commit -m "Weekly Sentinel-2 COG NDVI & change for NB ($(date -u +%F))"
            git push
          fi
          
